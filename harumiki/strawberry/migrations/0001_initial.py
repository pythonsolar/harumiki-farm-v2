# Generated by Django 5.2.1 on 2025-07-25 08:00

import django.contrib.postgres.indexes
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='SensorType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('unit', models.CharField(max_length=20)),
                ('min_value', models.FloatField(blank=True, help_text='Expected minimum value', null=True)),
                ('max_value', models.FloatField(blank=True, help_text='Expected maximum value', null=True)),
                ('decimal_places', models.PositiveSmallIntegerField(default=2)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'sensor_types',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='AggregationJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('5min', '5 Minutes'), ('hourly', 'Hourly'), ('daily', 'Daily')], max_length=10)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('total_sensors', models.PositiveIntegerField(default=0)),
                ('processed_sensors', models.PositiveIntegerField(default=0)),
                ('records_processed', models.PositiveIntegerField(default=0)),
                ('records_created', models.PositiveIntegerField(default=0)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveSmallIntegerField(default=0)),
                ('max_retries', models.PositiveSmallIntegerField(default=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(null=True)),
                ('completed_at', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'aggregation_jobs',
                'indexes': [models.Index(fields=['level', 'status', '-created_at'], name='aggregation_level_32f5d7_idx'), models.Index(fields=['status', '-created_at'], name='aggregation_status_182e19_idx'), models.Index(fields=['-created_at'], name='aggregation_created_e2714e_idx')],
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('farm', models.PositiveSmallIntegerField(choices=[(1, 'Farm 1'), (2, 'Farm 2')])),
                ('location', models.CharField(help_text='Physical location (R8, R16, R24, etc.)', max_length=50)),
                ('zone', models.CharField(blank=True, help_text='Zone identifier', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('api_sensor_id', models.CharField(help_text='ID used in API calls', max_length=50)),
                ('api_value_key', models.CharField(help_text='Key to extract value from API response', max_length=50)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional sensor configuration')),
                ('calibration_offset', models.FloatField(default=0.0)),
                ('calibration_multiplier', models.FloatField(default=1.0)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sensor_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sensors', to='strawberry.sensortype')),
            ],
            options={
                'db_table': 'sensors',
            },
        ),
        migrations.CreateModel(
            name='SystemHealth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('total_sensors', models.PositiveIntegerField()),
                ('active_sensors', models.PositiveIntegerField()),
                ('realtime_records', models.BigIntegerField()),
                ('recent_records', models.BigIntegerField()),
                ('historical_records', models.BigIntegerField()),
                ('archive_records', models.BigIntegerField()),
                ('avg_query_time', models.FloatField(null=True)),
                ('cache_hit_ratio', models.FloatField(null=True)),
                ('api_response_time', models.FloatField(null=True)),
                ('overall_quality_score', models.FloatField(null=True)),
                ('sensors_with_issues', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'system_health',
                'indexes': [models.Index(fields=['-timestamp'], name='system_heal_timesta_59a816_idx')],
            },
        ),
        migrations.CreateModel(
            name='LatestSensorValue',
            fields=[
                ('sensor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='strawberry.sensor')),
                ('timestamp', models.DateTimeField()),
                ('value', models.JSONField()),
                ('processed_value', models.FloatField(null=True)),
                ('quality_flag', models.CharField(default='good', max_length=10)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'latest_sensor_values',
                'indexes': [models.Index(fields=['updated_at'], name='latest_sens_updated_b3528e_idx'), models.Index(fields=['quality_flag'], name='latest_sens_quality_da9224_idx')],
            },
        ),
        migrations.CreateModel(
            name='HistoricalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, help_text='Hour boundary')),
                ('avg_value', models.FloatField()),
                ('min_value', models.FloatField()),
                ('max_value', models.FloatField()),
                ('sample_count', models.PositiveIntegerField()),
                ('std_deviation', models.FloatField(null=True)),
                ('median_value', models.FloatField(null=True)),
                ('percentile_25', models.FloatField(null=True)),
                ('percentile_75', models.FloatField(null=True)),
                ('quality_score', models.FloatField(default=100.0, help_text='Data quality percentage')),
                ('gap_count', models.PositiveIntegerField(default=0, help_text='Number of data gaps')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='strawberry.sensor')),
            ],
            options={
                'db_table': 'historical_data',
                'indexes': [django.contrib.postgres.indexes.BrinIndex(fields=['timestamp'], name='historical__timesta_49e57a_brin'), models.Index(fields=['sensor', '-timestamp'], name='historical__sensor__2c82f8_idx'), models.Index(fields=['quality_score'], name='historical__quality_eb6afc_idx')],
                'unique_together': {('sensor', 'timestamp')},
            },
        ),
        migrations.CreateModel(
            name='DataQuality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('expected_count', models.PositiveIntegerField()),
                ('actual_count', models.PositiveIntegerField()),
                ('missing_periods', models.JSONField(default=list, help_text='List of missing time ranges')),
                ('quality_score', models.FloatField(default=100.0)),
                ('good_count', models.PositiveIntegerField(default=0)),
                ('suspect_count', models.PositiveIntegerField(default=0)),
                ('bad_count', models.PositiveIntegerField(default=0)),
                ('missing_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='strawberry.sensor')),
            ],
            options={
                'db_table': 'data_quality',
                'indexes': [models.Index(fields=['sensor', '-date'], name='data_qualit_sensor__b4d888_idx'), models.Index(fields=['quality_score'], name='data_qualit_quality_471ff6_idx'), models.Index(fields=['date', 'quality_score'], name='data_qualit_date_d9223e_idx')],
                'unique_together': {('sensor', 'date')},
            },
        ),
        migrations.CreateModel(
            name='ArchiveData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, help_text='Day boundary (00:00:00)')),
                ('avg_value', models.FloatField()),
                ('min_value', models.FloatField()),
                ('max_value', models.FloatField()),
                ('sample_count', models.PositiveIntegerField()),
                ('std_deviation', models.FloatField(null=True)),
                ('median_value', models.FloatField(null=True)),
                ('percentile_25', models.FloatField(null=True)),
                ('percentile_75', models.FloatField(null=True)),
                ('total_value', models.FloatField(help_text='Daily total (for DLI, rainfall, etc.)', null=True)),
                ('duration_hours', models.FloatField(default=24.0, help_text='Actual measurement duration')),
                ('quality_score', models.FloatField(default=100.0)),
                ('uptime_percentage', models.FloatField(default=100.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='strawberry.sensor')),
            ],
            options={
                'db_table': 'archive_data',
                'indexes': [django.contrib.postgres.indexes.BrinIndex(fields=['timestamp'], name='archive_dat_timesta_bc38fe_brin'), models.Index(fields=['sensor', '-timestamp'], name='archive_dat_sensor__3ac42a_idx'), models.Index(fields=['sensor', 'timestamp'], name='archive_dat_sensor__85fd90_idx')],
                'unique_together': {('sensor', 'timestamp')},
            },
        ),
        migrations.CreateModel(
            name='AlertThreshold',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_threshold', models.FloatField(blank=True, null=True)),
                ('max_threshold', models.FloatField(blank=True, null=True)),
                ('rate_threshold', models.FloatField(blank=True, help_text='Rate of change threshold', null=True)),
                ('duration_minutes', models.PositiveIntegerField(default=5, help_text='Duration before triggering alert')),
                ('severity', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('critical', 'Critical')], default='warning', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_thresholds', to='strawberry.sensor')),
            ],
            options={
                'db_table': 'alert_thresholds',
                'indexes': [models.Index(fields=['sensor', 'is_active'], name='alert_thres_sensor__199749_idx')],
            },
        ),
        migrations.CreateModel(
            name='RealtimeData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('value', models.JSONField(help_text='Raw sensor data as JSON')),
                ('processed_value', models.FloatField(help_text='Main processed value for queries', null=True)),
                ('quality_flag', models.CharField(choices=[('good', 'Good'), ('suspect', 'Suspect'), ('bad', 'Bad'), ('missing', 'Missing')], default='good', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='strawberry.sensor')),
            ],
            options={
                'db_table': 'realtime_data',
                'indexes': [django.contrib.postgres.indexes.BrinIndex(fields=['timestamp'], name='realtime_da_timesta_cf3385_brin'), models.Index(fields=['sensor', '-timestamp'], name='realtime_da_sensor__5bb9e4_idx'), models.Index(fields=['timestamp', 'quality_flag'], name='realtime_da_timesta_91869e_idx'), models.Index(fields=['sensor', 'timestamp', 'quality_flag'], name='realtime_da_sensor__0a7542_idx')],
            },
        ),
        migrations.CreateModel(
            name='RecentData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, help_text='5-minute interval boundary')),
                ('avg_value', models.FloatField()),
                ('min_value', models.FloatField()),
                ('max_value', models.FloatField()),
                ('sample_count', models.PositiveIntegerField()),
                ('std_deviation', models.FloatField(null=True)),
                ('median_value', models.FloatField(null=True)),
                ('good_samples', models.PositiveIntegerField(default=0)),
                ('suspect_samples', models.PositiveIntegerField(default=0)),
                ('bad_samples', models.PositiveIntegerField(default=0)),
                ('missing_samples', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='strawberry.sensor')),
            ],
            options={
                'db_table': 'recent_data',
                'indexes': [django.contrib.postgres.indexes.BrinIndex(fields=['timestamp'], name='recent_data_timesta_ae140c_brin'), models.Index(fields=['sensor', '-timestamp'], name='recent_data_sensor__4707fd_idx'), models.Index(fields=['timestamp', 'sample_count'], name='recent_data_timesta_0d85b5_idx')],
                'unique_together': {('sensor', 'timestamp')},
            },
        ),
        migrations.AddIndex(
            model_name='sensor',
            index=models.Index(fields=['sensor_id'], name='sensors_sensor__4ea36a_idx'),
        ),
        migrations.AddIndex(
            model_name='sensor',
            index=models.Index(fields=['farm', 'sensor_type'], name='sensors_farm_9044c4_idx'),
        ),
        migrations.AddIndex(
            model_name='sensor',
            index=models.Index(fields=['api_sensor_id', 'api_value_key'], name='sensors_api_sen_52986b_idx'),
        ),
        migrations.AddIndex(
            model_name='sensor',
            index=models.Index(fields=['is_active', 'farm'], name='sensors_is_acti_eedb24_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sensor',
            unique_together={('api_sensor_id', 'api_value_key')},
        ),
    ]
